const int buttonPin = A2;
const int LED_pedG = A1;
const int LED_pedR = A0;
const int LED_carG = A5;
const int LED_carY = A4;
const int LED_carR = A3;
byte pin[] = {2, 3, 4, 5, 6, 7, 8};

int buttonState = 0;
int number[10][7] = 
{  // 10 rows, 7 column
  { 0,1,1,1,1,1,1 },    // 0
  { 0,0,0,0,1,1,0 },    // 1
  { 1,0,1,1,0,1,1 },    // 2
  { 1,0,0,1,1,1,1 },    // 3
  { 1,1,0,0,1,1,0 },    // 4
  { 1,1,0,1,1,0,1 },    // 5
  { 1,1,1,1,1,0,1 },    // 6
  { 0,0,0,0,1,1,1 },    // 7
  { 1,1,1,1,1,1,1 },    // 8
  { 1,1,0,1,1,1,1 }     // 9 
}; // an array of patterns to light up each segment of a digit

void setup() 
{
  Serial.begin(9600);
  // initialize the LED pins as an output:
  pinMode(LED_pedG, OUTPUT);
  pinMode(LED_pedR, OUTPUT);
  pinMode(LED_carG, OUTPUT);
  pinMode(LED_carY, OUTPUT);
  pinMode(LED_carR, OUTPUT);
  // initialize the pushbutton pin as an input:
  pinMode(buttonPin, INPUT_PULLUP);
  // initialize 7-seg display as output:  
  for (byte a = 0; a < 7; a++) 
  {
    pinMode(pin[a], OUTPUT);
  }
}

void displayNumber(int num)
{
  for (int b = 0; b < 7; b++)
  {
    digitalWrite(pin[b], number[num][b]); //display numbers
  }
}

void loop() 
{
  {
    buttonState = digitalRead(buttonPin);
    if (buttonState == LOW)
    {
      Serial.println(digitalRead(buttonPin));
      Serial.println("Button is pressed");
      sequence2();      
    }

    else
    {
      Serial.println(digitalRead(buttonPin));
      Serial.println("Button is not pressed");
      sequence1();
    }
  }

  {  
    if (digitalRead(LED_pedG) == HIGH)  // if ped traffic light is green, the 7-seg
    {                                   // will start to count down from 9 to 0
      for (int a = 9; a >= 0; a--)
      {
        displayNumber(a);
        delay(1000);
      }
    }
  }  
}

void sequence1()
{
  digitalWrite(LED_carG, HIGH);  // car light is green
  digitalWrite(LED_pedR, HIGH);  // ped light is red
  digitalWrite(LED_pedG, LOW);
  digitalWrite(LED_carR, LOW);
}

void sequence2()
{
    // Switch car traffic light from green to yellow.
  digitalWrite(LED_pedG, LOW);
  digitalWrite(LED_carR, LOW);
  digitalWrite(LED_pedR, HIGH);
  digitalWrite(LED_carG, LOW);
  digitalWrite(LED_carY, HIGH);
    for (int i = 5; i > 0; --i)  // yellow traffic light blinking
    {
      digitalWrite(LED_carY, HIGH);
      delay(500);
      digitalWrite(LED_carY, LOW);
      delay(500);
    } 
  digitalWrite(LED_pedR, LOW);
  digitalWrite(LED_pedG, HIGH);  // ped light from red to green
  digitalWrite(LED_carR, HIGH);  // car light turns red
}

